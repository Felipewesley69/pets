{"ast":null,"code":"import { configMap } from '@shared/config-map';\nimport { pipe } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor() {}\n\n    startLoading(loading) {\n      loading = this.handlerLoading(loading);\n      if (loading.startLoading) loading.load = true;\n    }\n\n    stopLoading(loading) {\n      loading = this.handlerLoading(loading);\n      return loading.stopLoading ? finalize(() => loading.load = false) : pipe();\n    }\n\n    configMapAndLoading(loading) {\n      return pipe(configMap(), this.stopLoading(loading));\n    }\n\n    handlerLoading(loading) {\n      if (loading == null || loading === undefined) loading = {\n        startLoading: false,\n        stopLoading: false\n      };\n      if (loading.startLoading === undefined) loading.startLoading = false;\n      if (loading.stopLoading === undefined) loading.stopLoading = false;\n      return loading;\n    }\n\n  }\n\n  LoadingService.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)();\n  };\n\n  LoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}