{"ast":null,"code":"import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart } from '@angular/router';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor(router) {\n      this.router = router;\n      this.showLoadingSource = new BehaviorSubject(false);\n      this.closeLoaderSource = new Subject();\n      this.listenCloseLoader();\n      this.listenChangeRoutes();\n    }\n\n    get showLoading$() {\n      return this.showLoadingSource.asObservable();\n    }\n\n    get closeLoader$() {\n      return this.closeLoaderSource.asObservable();\n    }\n\n    openLoader() {\n      this.showLoadingSource.next(true);\n    }\n\n    closeLoader() {\n      this.closeLoaderSource.next();\n    }\n\n    listenCloseLoader() {\n      this.closeLoader$.pipe(debounceTime(1000)).subscribe(() => {\n        this.showLoadingSource.next(false);\n      });\n    }\n\n    listenChangeRoutes() {\n      this.router.events.subscribe(event => {\n        switch (true) {\n          case event instanceof NavigationStart:\n            {\n              this.openLoader();\n              break;\n            }\n\n          case event instanceof NavigationEnd:\n          case event instanceof NavigationCancel:\n          case event instanceof NavigationError:\n            {\n              this.closeLoader();\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      });\n    }\n\n  }\n\n  LoadingService.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)(i0.ɵɵinject(i1.Router));\n  };\n\n  LoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac\n  });\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}