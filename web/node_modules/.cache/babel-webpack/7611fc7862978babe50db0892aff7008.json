{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { forwardRef } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { LoadingService } from '../services/loading.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\nexport let LoadingInterceptor = /*#__PURE__*/(() => {\n  class LoadingInterceptor {\n    constructor(loadingService) {\n      this.loadingService = loadingService;\n    }\n\n    intercept(req, next) {\n      this.loadingService.openLoader();\n      return next.handle(req).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          this.loadingService.closeLoader();\n        }\n      }), catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          this.loadingService.closeLoader();\n        }\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  LoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n    return new (t || LoadingInterceptor)(i0.ɵɵinject(forwardRef(() => LoadingService)));\n  };\n\n  LoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingInterceptor,\n    factory: LoadingInterceptor.ɵfac\n  });\n  return LoadingInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}